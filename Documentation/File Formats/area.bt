//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: area.bt
//   Authors: exec
//   Version: 1
//   Purpose: Mabinogi's .area file format.
//  Category: 
// File Mask: *.area
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "inc/common.bt"

local int _version;

typedef struct
{
    float dirX1;
    float dirX2;
    float dirY1;
    float dirY2;
    float lenX;
    float lenY;
    int type;
    Vector2F position;
    Vector2F bottomLeft;
    Vector2F topRight;
}
Shape;

typedef struct
{
    byte pointCount; // ?
    Vector2F point1;
    Vector2F point2;
    Vector2F point3;
    Vector2F point4;
    Vector2F point5; // same as point, connecting back to first?
    int type;
    Vector2F center;
    Vector2F bottomLeft;
    Vector2F topRight;
}
PointShape;

void Shapes(int count)
{
    if (count == 0)
        return;

    if (_version > 200)
        Shape shapes[count];
    else
    {
        PointShape shapes[count];
    }
}

typedef struct
{
    Bool isDefault;
    int parameterType;
    int signalType;
    WString name;
    WString xml;

}
EntityParameter <optimize=false>;

typedef struct
{
    if (_version > 200)
        int propId;

    EntityId entityId;
    WString name;
    Vector3F_XYZ position;
    byte shapeCount;
    int shapeType;

    if (_version == 200)
    {
        Shapes(shapeCount);
        byte unk1;
        int propId;
    }
    else
    {
        Shapes(shapeCount);
        Bool isCollision;
        Bool fixedAltitude;
    }

    float scale;
    float rotation; // radians

    if (_version > 200)
    {
        Vector3F_XZY bottomLeft;
        Vector3F_XZY topRight;
    }

    Color collorOverride;
    Color colors[9];

    if (_version > 200)
        WString title;

    WString state;
    byte parameterCount;
    if (parameterCount > 0)
        EntityParameter parameters[parameterCount];
}
Prop <optimize=false>;

typedef struct
{
    EntityId entityId;
    WString name;
    Vector3F_XYZ position;
    byte shapeCount;
    int shapeType;
    Shapes(shapeCount);
    int eventType;
    byte parameterCount;
    if (parameterCount > 0)
        EntityParameter parameters[parameterCount];
}
Event <optimize=false>;

typedef struct
{
    float height;
    float unk1;
    float unk2;
    Color unk3; // looks like a color
}
Plane;

typedef struct
{
    byte square1_0[4];
    byte square2_0[4];
    byte square3_0[4];
    byte square4_0[4];
    byte square1_1[4];
    byte square2_1[4];
    byte square3_1[4];
    byte square4_1[4];
}
Square;

typedef struct
{
    byte version;
    
    if (version >= 240)
    {
        byte unk1;
        byte unk2;
        byte unk3;
        byte unk4;
    }

    byte size;
    
    if (version >= 240)
        int materialSlots[4];
    else
        byte materialSlots[4];

    byte showPlane;
    byte useTiles;
    byte materialSlotIndexes[16];
    float minHeight;
    float maxHeight;

    if (version == 1 || version == 241)
    {
        float unk5;
        float unk6;
    }

    local int planeCount = (size * size);
    if (planeCount > 0)
        Plane planes[planeCount];
    Square suares[4];
}
AreaPlane <optimize=false>;

short version;
_version = version;

short unk8;
int length;
ushort areaId;
ushort regionId;
WString serverName;
WString areaName;
int planeCountX;
int planeCountY;
int unk1;
int unk2;
int eventCount;
int propCount;
float unk3;
float unk4;
int unk5;
int unk6;
int unk7;
Vector3F_XZY bottomLeft;
Vector3F_XZY bottomRight;
Vector3F_XZY topRight;
Vector3F_XZY topLeft;

if (version == 203)
    int unk9;

int version2;
int propCount2;
Prop props[propCount2];
Event events[eventCount];

// The terrain was different in version 200 as well,
// more research will be needed to decode that.
// Right now it's parsed incorrectly.

if (version == 200)
    return;

local int areaPlaneCount = (planeCountX * planeCountY);
AreaPlane areaPlanes[areaPlaneCount];

// Usually 65|68 bytes follow the planes, purpose unknown
// and why they appear hasn't been researched yet, neither
// why the lengths differ.

local int64 rest = (FileSize() - FTell());
if (rest > 0)
    byte unk10[rest];
